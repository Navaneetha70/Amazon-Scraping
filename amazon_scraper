{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ee164d9a-5a08-47e2-95aa-306d62142e2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             title          price               rating     reviews  \\\n",
      "0  Title not found  Not Available  4.5 out of 5 stars.  No Reviews   \n",
      "1  Title not found  Not Available            No Rating  No Reviews   \n",
      "2  Title not found        $499.00   4.6 out of 5 stars  No Reviews   \n",
      "3  Title not found        $699.00   4.4 out of 5 stars  No Reviews   \n",
      "4  Title not found  Not Available            No Rating  No Reviews   \n",
      "\n",
      "                                        availability  \n",
      "0                                      Not Available  \n",
      "1                                      Not Available  \n",
      "2                      Dec 10, 2023 | by PlayStation  \n",
      "3  ESRB Rating: Everyone | Nov 7, 2024 | by PlayS...  \n",
      "4                                  by Amazon Renewed  \n",
      "200\n",
      "<!DOCTYPE html>\n",
      "<html class=\"a-no-js\" data-19ax5a9jf=\"dingo\" lang=\"en-us\">\n",
      " <!-- sp:feature:head-start -->\n",
      " <head>\n",
      "  <script>\n",
      "   var aPageStart = (new Date()).getTime();\n",
      "  </script>\n",
      "  <meta charset=\"utf-8\"/>\n",
      "  <!-- sp:end-feature:head-start -->\n",
      "  <!-- sp:feature:csm:head-open-part1 -->\n",
      "  <script type=\"text/javascript\">\n",
      "   var ue_t0=ue_t0||+new Date();\n",
      "  </script>\n",
      "  <!-- sp:end-feature:csm:head-open-part1 -->\n",
      "  <!-- sp:feature:cs-optimization -->\n",
      "  <meta content=\"on\" http-equiv=\"x-dns-prefetch-control\"/>\n",
      "  <link href=\"https://images-na.ssl-images-amazon.com\" rel=\"dns-prefetch\"/>\n",
      "  <link href=\"https://m.media-amazon.com\" rel=\"dns-prefetch\"/>\n",
      "  <link href=\"https://completion.amazon.com\" rel=\"dns-prefetch\"/>\n",
      "  <!-- sp:end-feature:cs-optimization -->\n",
      "  <!-- sp:feature:csm:head-open-part2 -->\n",
      "  <script type=\"text/javascript\">\n",
      "   window.ue_ihb = (window.ue_ihb || window.ueinit || 0) + 1;\n",
      "if (window.ue_ihb === 1) {\n",
      "\n",
      "var ue_csm = window,\n",
      "    ue_hob = +new Date();\n",
      "(function(d){var e=d.ue=d.ue||{\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#  Use a valid User-Agent to bypass Amazon's anti-bot detection\n",
    "HEADERS = ({\n",
    "    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',\n",
    "    'Accept-Language': 'en-US, en;q=0.5'\n",
    "})\n",
    "\n",
    "#  Use the correct URL (Amazon blocks bots, so test with small URLs)\n",
    "URL = \"https://www.amazon.com/s?k=playstation+5\"\n",
    "\n",
    "# Send HTTP request\n",
    "response = requests.get(URL, headers=HEADERS)\n",
    "\n",
    "# Check if Amazon blocked the request\n",
    "if response.status_code != 200:\n",
    "    print(\"⚠️ Amazon blocked the request! Try changing the User-Agent.\")\n",
    "    exit()\n",
    "\n",
    "#  Parse HTML using BeautifulSoup\n",
    "soup = BeautifulSoup(response.content, \"html.parser\")\n",
    "\n",
    "#  Extract product titles\n",
    "def get_title(soup):\n",
    "    try:\n",
    "       title = soup.find(\"span\", attrs={\"id\": \"productTitle\"})\n",
    "\n",
    "    except AttributeError:\n",
    "        title = \"\"\n",
    "    return title\n",
    "\n",
    "#  Extract product prices\n",
    "def get_title(soup):\n",
    "    try:\n",
    "        title = soup.find(\"span\", attrs={\"id\": \"productTitle\"}).text.strip()\n",
    "        title_value = title.text.strip()\n",
    "        return title_value\n",
    "    except AttributeError:\n",
    "        return \"Title not found\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#  Extract product ratings\n",
    "def get_rating(soup):\n",
    "    try:\n",
    "       rating = soup.find(\"span\", attrs={\"class\": \"a-icon-alt\"}).text.strip()\n",
    "    except AttributeError:\n",
    "        rating = \"No Rating\"\n",
    "    return rating\n",
    "\n",
    "#  Extract the number of reviews\n",
    "def get_review_count(soup):\n",
    "    try:\n",
    "        reviews = soup.find(\"span\", attrs={\"id\": \"acrCustomerReviewText\"}).text.strip()\n",
    "    except AttributeError:\n",
    "        reviews = \"No Reviews\"\n",
    "    return reviews\n",
    "\n",
    "#  Extract availability status\n",
    "def get_availability(soup):\n",
    "    try:\n",
    "        available = soup.find(\"div\", class_=\"a-row a-size-base a-color-secondary\").text.strip()\n",
    "    except AttributeError:\n",
    "        available = \"Not Available\"\n",
    "    return available\n",
    "\n",
    "#  Store data in a DataFrame\n",
    "data = {\"title\": [], \"price\": [], \"rating\": [], \"reviews\": [], \"availability\": []}\n",
    "\n",
    "# Find all product containers\n",
    "products = soup.find_all(\"div\", class_=\"s-result-item\")\n",
    "\n",
    "# Loop through each product\n",
    "for product in products:\n",
    "    data[\"title\"].append(get_title(product))\n",
    "    data[\"price\"].append(get_price(product))\n",
    "    data[\"rating\"].append(get_rating(product))\n",
    "    data[\"reviews\"].append(get_review_count(product))\n",
    "    data[\"availability\"].append(get_availability(product))\n",
    "    # Inside the loop for each link:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#  Convert to DataFrame\n",
    "amazon_df = pd.DataFrame(data)\n",
    "\n",
    "#  Replace empty values with NaN\n",
    "amazon_df.replace(\"\", np.nan, inplace=True)\n",
    "\n",
    "#  Remove empty rows\n",
    "amazon_df.dropna(subset=[\"title\"], inplace=True)\n",
    "\n",
    "#  Save data to CSV\n",
    "amazon_df.to_csv(\"amazon_data.csv\", index=False)\n",
    "\n",
    "#  Display output\n",
    "print(amazon_df.head())\n",
    "response = requests.get(URL, headers=HEADERS)\n",
    "print(response.status_code)\n",
    "print(soup.prettify()[:1000]) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e38b812b-43e1-4e1b-8f3c-754ef69051fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(amazon_df) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d05fa68-92f6-4992-b0d1-1dec9cd7ac6b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c7ddf64-a484-4c42-baf5-425dea8f9fa1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
